name: Release Management

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    name: Create Release PR
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Run Release Please
        id: release
        uses: google-github-actions/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: simple
          package-name: tracksuit-backend
          changelog-types: |
            [
              {"type":"feat","section":"Features","hidden":false},
              {"type":"fix","section":"Bug Fixes","hidden":false},
              {"type":"perf","section":"Performance","hidden":false},
              {"type":"deps","section":"Dependencies","hidden":false},
              {"type":"docs","section":"Documentation","hidden":false}
            ]

      - name: Release summary
        if: steps.release.outputs.release_created
        run: |
          echo "Release created!"
          echo "Version: ${{ steps.release.outputs.version }}"
          echo "Tag: ${{ steps.release.outputs.tag_name }}"

  tag-docker-image:
    name: Tag Docker Image with Release Version
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release_created
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag and push versioned image
        run: |
          VERSION=${{ needs.release-please.outputs.version }}
          CURRENT_IMAGE="ghcr.io/${{ github.repository_owner }}/tracksuit-backend:main-${{ github.sha }}"
          NEW_IMAGE="ghcr.io/${{ github.repository_owner }}/tracksuit-backend:$VERSION"
          LATEST_IMAGE="ghcr.io/${{ github.repository_owner }}/tracksuit-backend:latest"

          echo "Tagging $CURRENT_IMAGE as $VERSION and latest"

          docker pull $CURRENT_IMAGE
          docker tag $CURRENT_IMAGE $NEW_IMAGE
          docker tag $CURRENT_IMAGE $LATEST_IMAGE
          docker push $NEW_IMAGE
          docker push $LATEST_IMAGE

          echo "âœ… Image tagged and pushed: $VERSION"

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release-please, tag-docker-image]
    if: needs.release-please.outputs.release_created
    steps:
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "ðŸŽ‰ New Release: ${{ needs.release-please.outputs.version }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*New Release Published*\n\n*Version:* ${{ needs.release-please.outputs.version }}\n*Tag:* ${{ needs.release-please.outputs.tag_name }}\n*Released by:* ${{ github.actor }}\n\n<https://github.com/${{ github.repository }}/releases/tag/${{ needs.release-please.outputs.tag_name }}|View Release Notes>"
                  }
                }
              ]
            }

      - name: Create deployment checklist
        run: |
          echo "Release ${{ needs.release-please.outputs.version }} is ready for deployment"
          echo ""
          echo "Next steps:"
          echo "1. Deploy to staging: gh workflow run deploy-ecs.yml -f environment=staging -f image_tag=${{ needs.release-please.outputs.version }}"
          echo "2. Verify staging deployment"
          echo "3. Deploy to production: gh workflow run deploy-ecs.yml -f environment=production -f image_tag=${{ needs.release-please.outputs.version }}"

